#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *
from os.path import abspath, basename, dirname, splitext

PACKAGE = basename(dirname(dirname(abspath(__file__))))

gen = ParameterGenerator()

gen.add("error_propagation_count", int_t, 0, default=3, min=0,
        description="Number of tries until error is propagated to upper level")
gen.add("lookahead", double_t, 0, default=4.0, min=0.0, description="Forward distance to local goal")
gen.add("overlap", double_t, 0, default=1.0, min=0.0, description="Overlap between trajectory segments")
gen.add("x_y_tolerance_increase", double_t, 0, default=1.0, min=0.0, max=10.0,
        description="Scaling of x and y tolerance")
gen.add("yaw_tolerance_increase", double_t, 0, default=1.0, min=0.0, max=10.0, description="Scaling of yaw tolerance")
gen.add("transformation_timeout", double_t, 0, default=0.1, min=0.0, max=10.0,
        description="Timeout for waiting for transforms")

gen.add("enable_trajectory_validation", bool_t, 0, "Enable additional check of the local planner's output trajectory using different heuristics", False)
gen.add("max_dist_between_planner_poses", double_t, 0, default=2.0, min=0.0, max=100.0,
        description="Maximum allowed distance between consecutive poses provided by the local planner, otherwise invalid.")
gen.add("max_accumulated_distance", double_t, 0, default=10.0, min=0.0, max=100.0,
        description="Maximum accumulated distance between all consecutive poses provided by the local planner, otherwise invalid.")
gen.add("max_accumulated_angle", double_t, 0, default=31.415, min=0.0, max=100.0,
        description="Maximum accumulated angle between all consecutive poses provided by the local planner, otherwise invalid.")
gen.add("delay_s_after_invalid_trajectory", double_t, 0, default=0.5, min=0.0, max=10.0,
        description="Waiting time before propagating error, after an invalid trajectory from the local planner was computed")

exit(gen.generate(PACKAGE, PACKAGE + "_node", splitext(basename(__file__))[0]))
